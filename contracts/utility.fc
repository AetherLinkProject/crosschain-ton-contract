#include "imports/stdlib.fc";

;;
;; convert proxy to ton message
;;  intput:
;;  slice:in_msg_body
;;
;;  return:
;;  int:messageId
;;  int:sorceChainId
;;  int:targetChainId
;;  slice:message sender()
;;  slice:message receiver(the ton contract address)
;;  slice:message

(int, int, int, slice, slice, slice) convert_forward_message(slice message_body) impure {
    int messageId = message_body~load_int(256);

    slice orignalData = message_body~load_ref().begin_parse();
    int sourceChaindId = orignalData~load_int(64);
    int targetChainId = orignalData~load_int(64);
    slice sender = orignalData~load_ref().begin_parse();
    slice receiver = orignalData~load_ref().begin_parse();
    slice message = orignalData~load_ref().begin_parse();

    return (messageId, sourceChaindId, targetChainId, sender, receiver, message);
}

;; assemble cross chain message
;;
;;  input:
;;  int:target chain id
;;  slice:receiver
;;  slice:report
;;
;;  return:
;;  cell:assemble data as cell
;;
(cell) assemble_cross_chain_message(int targetChainId, cell receiver, cell report, cell extraData){
    builder extraSlice = begin_cell();
    if(~ extraData.null?()){
        extraSlice.store_ref(extraData);
    }
    return begin_cell()
        .store_int(targetChainId,64)
        .store_ref(receiver)
        .store_ref(report)
        .store_ref(extraSlice.end_cell())
        .end_cell();
}