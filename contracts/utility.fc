#include "imports/stdlib.fc";

(cell) assemble_cross_chain_message(int targetChainId, cell receiver, cell report, cell extraData){
    builder result = begin_cell()
        .store_int(targetChainId,32)
        .store_ref(receiver)
        .store_ref(report);
    if(~ extraData.null?()){
        result = result.store_ref(extraData);
        return result.end_cell();
    }

    return result.end_cell();
}

() emit_log_simple(int event_id, cell data, int need_separate_cell) impure inline {
    ;; 1023 - (4+2+9+256+64+32+2) = 654 bit free
    var msg = begin_cell()
        .store_uint (12, 4)         ;; ext_out_msg_info$11 src:MsgAddressInt () 1100
        .store_uint (1, 2)          ;; addr_extern$01
        .store_uint (256, 9)        ;; len:(## 9)
        .store_uint(event_id, 256); ;; external_address:(bits len)

    if (need_separate_cell) {
        msg = msg.store_uint(1, 64 + 32 + 2) ;; created_lt, created_at, init:Maybe, body:Either
            .store_ref(data);
    } else {
        msg = msg.store_uint(0, 64 + 32 + 2) ;; created_lt, created_at, init:Maybe, body:Either
            .store_slice(data.begin_parse());
    }

    send_raw_message(msg.end_cell(), 0);
}