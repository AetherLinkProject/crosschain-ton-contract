#include "../imports/stdlib.fc";
#include "op.fc";

(int, int, cell, cell) load_data() {
    slice ds = get_data().begin_parse();
    int threshold = ds~load_uint(32);  
    int totalOwners = ds~load_uint(32);  
    cell ownersDict = ds~load_dict();  
    cell transactions = ds~load_dict();  
    return (threshold, totalOwners, ownersDict, transactions);
}

() save_data(int threshold, int totalOwners, cell ownersDict, cell transactions) impure {
    set_data(
        begin_cell()
            .store_uint(threshold, 32)
            .store_uint(totalOwners, 32)
            .store_dict(ownersDict)
            .store_dict(transactions)
            .end_cell()
    );
}

() propose_transaction(int txId, slice targetContract, cell txData) impure {
    (int threshold, int totalOwners, cell ownersDict, cell transactions) = load_data();

    (slice existingTx, int exists) = transactions.udict_get?(256, txId);
    throw_unless(rsp::TxAlreadyExists, exists == 0);

    cell new_tx = begin_cell()
        .store_slice(targetContract)
        .store_ref(txData)
        .end_cell();

    slice txSlice = new_tx.begin_parse(); 

    transactions~udict_set(256, txId, txSlice);

    save_data(threshold, totalOwners, ownersDict, transactions);
}

() execute_transaction(int txId) impure {
    (int threshold, int totalOwners, cell ownersDict, cell transactions) = load_data();
    
    (slice txData, int exists) = transactions.udict_get?(256, txId);
    throw_unless(rsp::TxAlreadyExists, exists == 0);

    slice targetContract = txData~load_msg_addr();
    cell operationData = txData~load_ref();

    send_raw_message(begin_cell()
        .store_uint(0x10, 6)
        .store_slice(targetContract) 
        .store_coins(0) 
        .store_ref(operationData) 
        .end_cell(), 1);

    transactions~udict_delete?(256, txId);
}

() approve_transaction(int txId, slice signature) impure {
    (int threshold, int totalOwners, cell ownersDict, cell transactions) = load_data();

    (slice txData, int found) = transactions.udict_get?(256, txId);
    throw_unless(rsp::TxNotFound, found == -1);

    int txHash = transactions.cell_hash();

    int signCount = 0;
    int leastSignerCount = threshold;
    
    (int ownerIndex, slice ownerPublicKey, int flag) = ownersDict.udict_get_min?(256);
    while (flag) {
        throw_unless(rsp::InvalidSignature, check_signature(txHash, signature, ownerPublicKey~load_uint(256)));
        signCount = signCount + 1;
        
        if (signCount >= leastSignerCount) {
            flag = 0;
        } else {
            (ownerIndex, ownerPublicKey, flag) = ownersDict.udict_get_next?(256, ownerIndex);
        }
    }

    throw_unless(rsp::NotEnoughSignatures, signCount >= threshold);
    
    execute_transaction(txId);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_body;
    int opCode = cs~load_uint(32); 

    if (opCode == multiop::ProposeTx) { 
        int txId = cs~load_uint(64);
        slice targetContract = cs~load_msg_addr();
        cell txData = cs~load_ref();
        propose_transaction(txId, targetContract, txData);
    } elseif (opCode == multiop::ApproveTx) {  
        int txId = cs~load_uint(64);
        slice signature = cs~load_ref().begin_parse();
        approve_transaction(txId, signature);
    } elseif (opCode == multiop::ExecuteTx) {  
        int txId = cs~load_uint(64);
        execute_transaction(txId);
    } else {  
        throw(rsp::ExecuteTxFailed);
    }
}

int get_threshold() method_id {
    (int threshold, _, _, _) = load_data();
    return threshold;
}

cell get_transactions() method_id {
    (_, _, _, cell transactions) = load_data();
    return transactions;
}